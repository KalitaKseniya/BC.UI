/**
 * BC.Problems
 * Microservice to manage problems
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { Configuration }                                     from '../configuration';
import { environment } from 'src/environments/environment';
import { AddedResponse, Operation, ProblemForCreateModel, ProblemForReadModel, ProblemForUpdateModel } from '../models/models';
import { CustomHttpUrlEncodingCodec } from './encoder';
import { ProblemProgressForUpdateModel } from '../models/problems/problemProgressForUpdateModel';


@Injectable({ providedIn: 'root'})
export class ProblemsService {

    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional() configuration: Configuration) {
      this.basePath = environment.serverProblemUrl;
      if (configuration) {
          this.configuration = configuration;
      }
  }
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     *
     *
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createProblem(body?: ProblemForCreateModel, observe?: 'body', reportProgress?: boolean): Observable<AddedResponse>;
    public createProblem(body?: ProblemForCreateModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AddedResponse>>;
    public createProblem(body?: ProblemForCreateModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AddedResponse>>;
    public createProblem(body?: ProblemForCreateModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<AddedResponse>('post',`${this.basePath}/api/problems`,
            {
                body: body,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteProblem(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteProblem(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteProblem(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteProblem(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteProblem.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/api/problems/${encodeURIComponent(String(id))}`,
            {
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

  /**
     *
     *
     * @param masterId
     * @param searchTerm
     * @param pageNumber
     * @param pageSize
     * @param orderBy
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
   public getMasterProblemsList(masterId: string, searchTerm?: string, pageNumber?: number, pageSize?: number, orderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<ProblemForReadModel>>;
   public getMasterProblemsList(masterId: string, searchTerm?: string, pageNumber?: number, pageSize?: number, orderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ProblemForReadModel>>>;
   public getMasterProblemsList(masterId: string, searchTerm?: string, pageNumber?: number, pageSize?: number, orderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ProblemForReadModel>>>;
   public getMasterProblemsList(masterId: string, searchTerm?: string, pageNumber?: number, pageSize?: number, orderBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

       if (masterId === null || masterId === undefined) {
           throw new Error('Required parameter masterId was null or undefined when calling getMasterProblemsList.');
       }

       let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
       if (searchTerm !== undefined && searchTerm !== null) {
           queryParameters = queryParameters.set('SearchTerm', <any>searchTerm);
       }
       if (pageNumber !== undefined && pageNumber !== null) {
           queryParameters = queryParameters.set('PageNumber', <any>pageNumber);
       }
       if (pageSize !== undefined && pageSize !== null) {
           queryParameters = queryParameters.set('PageSize', <any>pageSize);
       }
       if (orderBy !== undefined && orderBy !== null) {
           queryParameters = queryParameters.set('OrderBy', <any>orderBy);
       }

       let headers = this.defaultHeaders;

       // to determine the Accept header
       let httpHeaderAccepts: string[] = [
           'text/plain',
           'application/json',
           'text/json'
       ];
       const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
       if (httpHeaderAcceptSelected != undefined) {
           headers = headers.set('Accept', httpHeaderAcceptSelected);
       }

       // to determine the Content-Type header
       const consumes: string[] = [
       ];

       return this.httpClient.request<Array<ProblemForReadModel>>('get',`${this.basePath}/api/masters/${encodeURIComponent(String(masterId))}/problems`,
           {
               params: queryParameters,
               headers: headers,
               observe: observe,
               reportProgress: reportProgress
           }
       );
   }

   /**
    *
    *
    * @param searchTerm
    * @param pageNumber
    * @param pageSize
    * @param orderBy
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
   public getNewProblemList(searchTerm?: string, pageNumber?: number, pageSize?: number, orderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<ProblemForReadModel>>;
   public getNewProblemList(searchTerm?: string, pageNumber?: number, pageSize?: number, orderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ProblemForReadModel>>>;
   public getNewProblemList(searchTerm?: string, pageNumber?: number, pageSize?: number, orderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ProblemForReadModel>>>;
   public getNewProblemList(searchTerm?: string, pageNumber?: number, pageSize?: number, orderBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

       let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
       if (searchTerm !== undefined && searchTerm !== null) {
           queryParameters = queryParameters.set('SearchTerm', <any>searchTerm);
       }
       if (pageNumber !== undefined && pageNumber !== null) {
           queryParameters = queryParameters.set('PageNumber', <any>pageNumber);
       }
       if (pageSize !== undefined && pageSize !== null) {
           queryParameters = queryParameters.set('PageSize', <any>pageSize);
       }
       if (orderBy !== undefined && orderBy !== null) {
           queryParameters = queryParameters.set('OrderBy', <any>orderBy);
       }

       let headers = this.defaultHeaders;

       // to determine the Accept header
       let httpHeaderAccepts: string[] = [
           'text/plain',
           'application/json',
           'text/json'
       ];
       const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
       if (httpHeaderAcceptSelected != undefined) {
           headers = headers.set('Accept', httpHeaderAcceptSelected);
       }

       // to determine the Content-Type header
       const consumes: string[] = [
       ];

       return this.httpClient.request<Array<ProblemForReadModel>>('get',`${this.basePath}/api/problems/new`,
           {
               params: queryParameters,
               headers: headers,
               observe: observe,
               reportProgress: reportProgress
           }
       );
   }
   /**
     *
     *
     * @param id
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateProblemProgress(id: string, body?: ProblemProgressForUpdateModel, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateProblemProgress(id: string, body?: ProblemProgressForUpdateModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateProblemProgress(id: string, body?: ProblemProgressForUpdateModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateProblemProgress(id: string, body?: ProblemProgressForUpdateModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateProblemProgress.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/api/problems/${encodeURIComponent(String(id))}/progress`,
            {
                body: body,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProblem(id: string, observe?: 'body', reportProgress?: boolean): Observable<ProblemForReadModel>;
    public getProblem(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ProblemForReadModel>>;
    public getProblem(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ProblemForReadModel>>;
    public getProblem(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getProblem.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ProblemForReadModel>('get',`${this.basePath}/api/problems/${encodeURIComponent(String(id))}`,
            {
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param searchTerm
     * @param pageNumber
     * @param pageSize
     * @param orderBy
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProblemList(searchTerm?: string, pageNumber?: number, pageSize?: number, orderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<ProblemForReadModel>>;
    public getProblemList(searchTerm?: string, pageNumber?: number, pageSize?: number, orderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ProblemForReadModel>>>;
    public getProblemList(searchTerm?: string, pageNumber?: number, pageSize?: number, orderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ProblemForReadModel>>>;
    public getProblemList(searchTerm?: string, pageNumber?: number, pageSize?: number, orderBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (searchTerm !== undefined && searchTerm !== null) {
            queryParameters = queryParameters.set('SearchTerm', <any>searchTerm);
        }
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('PageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('PageSize', <any>pageSize);
        }
        if (orderBy !== undefined && orderBy !== null) {
            queryParameters = queryParameters.set('OrderBy', <any>orderBy);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<ProblemForReadModel>>('get',`${this.basePath}/api/problems`,
            {
                params: queryParameters,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

/**
     *
     *
     * @param userId
     * @param searchTerm
     * @param pageNumber
     * @param pageSize
     * @param orderBy
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
 public getUserProblemsList(userId: string, searchTerm?: string, pageNumber?: number, pageSize?: number, orderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<ProblemForReadModel>>;
 public getUserProblemsList(userId: string, searchTerm?: string, pageNumber?: number, pageSize?: number, orderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ProblemForReadModel>>>;
 public getUserProblemsList(userId: string, searchTerm?: string, pageNumber?: number, pageSize?: number, orderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ProblemForReadModel>>>;
 public getUserProblemsList(userId: string, searchTerm?: string, pageNumber?: number, pageSize?: number, orderBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

     if (userId === null || userId === undefined) {
         throw new Error('Required parameter userId was null or undefined when calling getUserProblemsList.');
     }

     let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
     if (searchTerm !== undefined && searchTerm !== null) {
         queryParameters = queryParameters.set('SearchTerm', <any>searchTerm);
     }
     if (pageNumber !== undefined && pageNumber !== null) {
         queryParameters = queryParameters.set('PageNumber', <any>pageNumber);
     }
     if (pageSize !== undefined && pageSize !== null) {
         queryParameters = queryParameters.set('PageSize', <any>pageSize);
     }
     if (orderBy !== undefined && orderBy !== null) {
         queryParameters = queryParameters.set('OrderBy', <any>orderBy);
     }

     let headers = this.defaultHeaders;

     // to determine the Accept header
     let httpHeaderAccepts: string[] = [
         'text/plain',
         'application/json',
         'text/json'
     ];
     const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
     if (httpHeaderAcceptSelected != undefined) {
         headers = headers.set('Accept', httpHeaderAcceptSelected);
     }

     // to determine the Content-Type header
     const consumes: string[] = [
     ];

     return this.httpClient.request<Array<ProblemForReadModel>>('get',`${this.basePath}/api/users/${encodeURIComponent(String(userId))}/problems`,
         {
             params: queryParameters,
             headers: headers,
             observe: observe,
             reportProgress: reportProgress
         }
     );
 }

    /**
     *
     *
     * @param searchTerm
     * @param pageNumber
     * @param pageSize
     * @param orderBy
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public headProblemList(searchTerm?: string, pageNumber?: number, pageSize?: number, orderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<ProblemForReadModel>>;
    public headProblemList(searchTerm?: string, pageNumber?: number, pageSize?: number, orderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ProblemForReadModel>>>;
    public headProblemList(searchTerm?: string, pageNumber?: number, pageSize?: number, orderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ProblemForReadModel>>>;
    public headProblemList(searchTerm?: string, pageNumber?: number, pageSize?: number, orderBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (searchTerm !== undefined && searchTerm !== null) {
            queryParameters = queryParameters.set('SearchTerm', <any>searchTerm);
        }
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('PageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('PageSize', <any>pageSize);
        }
        if (orderBy !== undefined && orderBy !== null) {
            queryParameters = queryParameters.set('OrderBy', <any>orderBy);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<ProblemForReadModel>>('head',`${this.basePath}/api/problems`,
            {
                params: queryParameters,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param id
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public partiallyUpdateProblem(id: string, body?: Array<Operation>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public partiallyUpdateProblem(id: string, body?: Array<Operation>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public partiallyUpdateProblem(id: string, body?: Array<Operation>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public partiallyUpdateProblem(id: string, body?: Array<Operation>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling partiallyUpdateProblem.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('patch',`${this.basePath}/api/problems/${encodeURIComponent(String(id))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param id
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateProblem(id: string, body?: ProblemForUpdateModel, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateProblem(id: string, body?: ProblemForUpdateModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateProblem(id: string, body?: ProblemForUpdateModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateProblem(id: string, body?: ProblemForUpdateModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateProblem.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/api/problems/${encodeURIComponent(String(id))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
